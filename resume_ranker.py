# -*- coding: utf-8 -*-
"""Resume ranker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yNUfANovuoN0OKqD7fwSCsJKPcJeM8D5
"""

import pandas as pd
import numpy as np
import nltk
import re

nltk.download()

"""###Read CSV file"""

resume_data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Resume renker/Resume Ranking Data set.csv')

"""###resume_data before preprocess"""

resume_data.head(10)

resume_data.columns

"""###Null value sum before data preprocess"""

resume_data.isnull().sum()

"""###Remove unnecessary columns from dataset"""

resume_data.drop(['emails','skills_segment','degree','url'], inplace=True, axis=1)

resume_data.drop(['university_0','university_1','university_2','university_3','university_4','university_5'], inplace=True, axis=1)

resume_data.drop(['accomplishments_segment','misc_segment','name','phone','education_segment'], axis=1, inplace=True)

resume_data.drop(['objectives_segment','projects_segment','work_segment'], axis=1, inplace=True)

resume_data

"""Feature selection on links column"""

resume_data['links'].fillna('Missing',inplace=True)

resume_data['profiles'] = 'No Profile'

ind = 0
for i in resume_data.links:
  lst = re.sub("[\s]","",i)
  # print(lst)
  for j in lst.split(','):
    if j.find('github') != -1:          
      resume_data.loc[ind,'profiles'] = 'Github'
    elif j.find('linkedin') != -1:
      if resume_data.loc[ind,'profiles'] == 'No Profile':
        resume_data.loc[ind,'profiles'] = 'Linkedin'
      else:
        resume_data.loc[ind,'profiles'] = resume_data.loc[ind,'profiles'] + ' , ' + 'Linkedin'
  ind +=1

resume_data['work_experience'].fillna(0,inplace=True)

ind = 0
for i in resume_data.work_experience:
  if i < 0:
    resume_data.loc[ind,'work_experience'] = i*-1
  elif i > 40:
    resume_data.loc[ind,'work_experience'] = 0
  ind +=1

"""###Dataset after preprocess on links and text columns"""

resume_data.drop(['links','text'],axis=1,inplace= True)
resume_data['work_experience'] = resume_data['work_experience'].astype(int)
resume_data

resume_data['job_titles'].fillna('no work',inplace=True)

"""###Null value sum after data preprocess"""

resume_data.isnull().sum()

"""###Natural language processing functions"""

from nltk.corpus import wordnet
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from nltk.stem.wordnet import WordNetLemmatizer
from nltk.corpus import stopwords as stp
from sklearn.feature_extraction.text import CountVectorizer

lemmatizer = WordNetLemmatizer()
analyzer = CountVectorizer().build_analyzer()

def getting_words(word):
    """Map POS tag to first character lemmatize() accepts"""
    tag = nltk.pos_tag([word])[0][1][0].upper()
    tag_dict = {"J": wordnet.ADJ,
                "N": wordnet.NOUN,
                "V": wordnet.VERB,
                "R": wordnet.ADV}
    return tag_dict.get(tag, wordnet.NOUN)

def stem_word(doc):
    return (lemmatizer.lemmatize(w,getting_words(w)) for w in analyzer(doc) if w not in set(stp.words('english')))        

def cosine_similar(compare_doc,doc_corpus):
    
    tf_idf_vect = TfidfVectorizer(analyzer=stem_word)
    tf_idf_req_vector = tf_idf_vect.fit_transform([compare_doc]).todense()
    tf_idf_resume_vector = tf_idf_vect.transform(doc_corpus).todense()
    cosine_similarity_list = []
    for i in range(len(tf_idf_resume_vector)):
        cosine_similarity_list.append(cosine_similarity(tf_idf_req_vector,tf_idf_resume_vector[i])[0][0])
    return cosine_similarity_list

text_dic = """Job Area:Engineering Group, Engineering Group > Systems Engineering

                  General Summary

                  Bachelor's degree in Engineering, Information Systems, Computer Science, or related field.
                    12+ years Software Engineering or related work experience.
                    12+ years experience with Programming Language such as C, C++/ Python, etc                  

                  Desired Skills And Aptitudes
                    Strong theoretical understanding of model architectures of various object classification, object detection models, recommender systems, NLP, Text and voice processing models, 3D models
                    Experience in creating new Neural NW architectures for different use cases and the use of correct datasets, achieving the desired target accuracy
                    Forward looking attitude, analyse upcoming trends in neural NWs and technics
                    Strong understanding of various model quantization techniques.
                    Strong understanding of various model pruning and compression techniques.
                    Strong in mathematical statistics, probability theory and Linear algebra related to Machine Learning / Deep Neural NWs
                    Strong understanding in traditional Machine learning methods such as Linear & Logistic regression, SVM, Kernel methods, Decision trees, Bagging and Boasting techniques, etc. is desirable
                    Understanding of performance and accuracy metrics for different class of neural NWs
                    Background of HW architectures like GPUs, AI accelerators like TPUs will be a plus
                    Strong development skills in C++ / Python
                    Strong hands on expertise in Deep Learning frameworks such as Pytorch and TensorFlow
                    Excellent communication skills (written and verbal) and team player

                   Minimum Qualifications

                  Additional Job Description
                   
                    Bachelor's degree in Engineering, Information Systems, Computer Science, or related field.
                    2+ years Software Engineering or related work experience.
                    2+ years experience with Programming Language such as C, C++/ Python, etc.

                  Bachelor's degree in Engineering, Information Systems, Computer Science, or related field.
                    12+ years Software Engineering or related work experience.
                    12+ years experience with Programming Language such as C, C++/ Python, etc.
                                      
                   Minimum Qualifications
                   
                    Bachelor's degree in Engineering, Information Systems, Computer Science, or related field.
                    2+ years Software Engineering or related work experience.
                    2+ years experience with Programming Language such as C, C++/ Python, etc.

                  Education

                  Minimum Qualifications

                  Bachelors - Computer Science, Bachelors - Engineering, Bachelors - Information Systems

                  Work Experiences

                  7+ years of Systems engineering or related work experience.

                  Skills

                  Certifications:

                  Machine Learning

                  Education

                  Preferred Qualifications

                  Work Experiences

                  2+ years experience working in a large matrixed organization. ,1+ years of work experience in a role requiring interaction with senior leadership (e.g., Director level and above)."""
resume_doc_text = []
for i in resume_data.iloc[:].values:
  e= ''
  for j in list(i):
    if len(e) == 0:
      e = str(j)
    else:
      e = e+','+str(j)
  resume_doc_text.append(e)

cos_list = cosine_similar(text_dic,resume_doc_text)
final_doc_rating_list = []

zipped_docs = zip(cos_list,[x for x in range(len(resume_data))])
sorted_doc_list = sorted(zipped_docs, key = lambda x: x[0], reverse=True)

resume_rank = [round(x*100,2) for x in cos_list]
pd.DataFrame(resume_rank,columns=['resume_rank %']).sort_values(by=['resume_rank %'],ascending=False).head(10)